<script src="/static/admin/js/pusher.min.js"></script>

<script>
    let pusher = new Pusher('{{.PreferenceMap["pusher-key"]}}', {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001,
        forceTLS: false,
        enabledTransports: ["ws", "wss"],
        disabledTransports: [],
    })

    // things we want to look for
    let publicChannel = pusher.subscribe("public-channel")

    // - service comes up
    publicChannel.bind("app-starting", function(data) {
        successAlert(data.message)
    })

    // - monitoring is turned off
    publicChannel.bind("app-stopping", function(data) {
        warningAlert(data.message)
    })

    // - service status changed
    // - service goes down
    publicChannel.bind("host-service-status-changed", function(data) {
        attention.toast({
            msg: data.message,
            icon: 'info',
            timer: 30000,
            showCloseButton: true,
        })

        // update tables
        // remove existing table row if it exist
        let exists = !!document.getElementById("host-service-" + data.host_service_id)
        if (exists) {
            let row = document.getElementById("host-service-" + data.host_service_id)
            row.parentNode.removeChild(row)
        }

        // update tables, if they exist
        let tableExists = !!document.getElementById(data.status + "-table")
        if (tableExists) {
            console.log(`Trying to add table to ${data.status} table`)
            let tableRef = document.getElementById(data.status + "-table")
            let newRow = tableRef.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "host-service-" + data.host_service_id)

            // insert the first td
            let newCell = newRow.insertCell(0)
            newCell.innerHTML = `<span class="${data.icon}"></span> ${data.service_name}
            <span class="badge bg-seconday pointer onclick="checkNow(${data.host_service_id}, '${data.status}')">
            Check Now
            </span>`

            // insert the second td
            newCell = newRow.insertCell(1)
            if (data.status !== "pending") {
                newCell.innerHTML = `${data.last_check}`
            } else {
                newCell.innerHTML = "Pending..."
            }

            // insert the third td
            newCell = newRow.insertCell(2)
        }
    })

    publicChannel.bind("host-service-count-changed", function(data){
        let healthyCountSpan = document.getElementById("healthy_count")
        let healthyCountExists = !!healthyCountSpan
        if (healthyCountExists) {
            healthyCountSpan.innerHTML = data.healthy_count;
            document.getElementById("problem_count").innerHTML = data.problem_count;
            document.getElementById("pending_count").innerHTML = data.pending_count;
            document.getElementById("warning_count").innerHTML = data.warning_count;
        }
    })

    // - scheduled changed
    // - next-run-event changes

    let attention = Prompt();

    {{if .Flash != ""}}
        successAlert('{{.Flash}}')
    {{end}}

    {{if .Warning != ""}}
        warningAlert('{{.Warning}}')
    {{end}}

    {{if .Error != ""}}
        errorAlert('{{.Error}}')
    {{end}}

    let monitoringLiveInput = document.getElementById("monitoring-live")
    monitoringLiveInput.addEventListener("change", function () {
        let enabled = monitoringLiveInput.checked
        if (!enabled) {
            attention.confirm({
                html: "This will stop monitoring of all hosts and services. Are you sure?",
                callback: function(result) {
                    if (result) {
                        // want to turn monitoring off
                        updateSystemPref("monitoring_live", "0")
                        toggleMonitoring(0)
                    } else {
                        monitoringLiveInput.checked = true
                    }
                }
            })
        } else {
            updateSystemPref("monitoring_live", "1")
            toggleMonitoring(1)
        }
    })

    function updateSystemPref(prefName, prefValue) {
        let formData = new FormData()
        formData.append("pref_name", prefName)
        formData.append("pref_value", prefValue)
        formData.append("csrf_token", "{{ .CSRFToken }}")

        let ajax = new XMLHttpRequest()
        ajax.responseType = "json"
        ajax.open("POST", "/admin/preference/ajax/set-system-pref")
        ajax.send(formData)

        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message)
                }
            }
        }
    }

    function toggleMonitoring(enabled) {
        let formData = new FormData()
        formData.append("enabled", enabled)
        formData.append("csrf_token", "{{ .CSRFToken }}")

        let ajax = new XMLHttpRequest()
        ajax.responseType = "json"
        ajax.open("POST", "/admin/preference/ajax/toggle-monitoring")
        ajax.send(formData)

        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message)
                }
            }
        }
    }
</script>
